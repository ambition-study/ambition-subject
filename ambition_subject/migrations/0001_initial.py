# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-02 20:20
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_crypto_fields.mixins
import django_revision.revision_field
import edc_base.bw.validators
import edc_base.model_fields.custom_fields
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.phone
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('edc_appointment', '0007_auto_20170302_2220'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalResultItem',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', dc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(null=True)),
                ('utestid', models.CharField(max_length=25, null=True)),
                ('value', models.CharField(max_length=25, null=True)),
                ('quantifier', models.CharField(max_length=25, null=True)),
                ('value_datetime', models.DateTimeField(null=True)),
                ('reference', models.CharField(max_length=25, null=True)),
                ('pending_datetime', models.DateTimeField(
                    default=django.utils.timezone.now)),
                ('pending', models.BooleanField(default=True)),
                ('resulted_datetime', models.DateTimeField(null=True)),
                ('resulted', models.BooleanField(default=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'historical result item',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(
                    max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=edc_base.utils.get_uuid,
                                                              editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.',
                                                            max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, editable=False,
                                          help_text='a field used for quick search', max_length=250, null=True)),
                ('citizen', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A',
                                                    help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A',
                                                          help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY',
                                                             max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[
                 django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(
                    help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), (
                    'YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[
                 ('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)",
                                                                                           max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the client')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the client had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='I have asked the client questions about this study and they have demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='The client has signed the consent form?')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy to the clinic with the consent', max_length=20, null=True, validators=[
                 edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the client with a copy of their signed informed consent')),
                ('may_store_samples', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the subject agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='-', help_text="( if 'Yes' STOP patient cannot be consented )",
                                                     max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant LITERATE?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                                                                                          max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's Last and first name (illiterates only)")),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English')], default='not specified',
                                              help_text='The language used for the edc_consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(
                    default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(
                    editable=False, null=True)),
                ('verified_by', models.CharField(
                    editable=False, max_length=25, null=True)),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(
                    blank=True, help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('identity_type', edc_base.model_fields.custom_fields.IdentityTypeField(choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), (
                    'PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(
                    blank=True, help_text='Retype the identity number from the identity card (Encryption: RSA local)', max_length=71, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[
                 edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False,
                                             help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.',
                                         max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.',
                                                max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False,
                                                        help_text='A unique identifier for this consent instance')),
                ('is_signed', models.BooleanField(
                    default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'historical subject consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectLocator',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(
                    db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(
                    default=edc_base.utils.get_utcnow)),
                ('date_signed', models.DateField(
                    default=datetime.date.today, verbose_name='Date Locator Form signed ')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Mailing address ')),
                ('home_visit_permission', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to make home visits for follow-up purposes during the study?')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Physical address with detailed description')),
                ('may_follow_up', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to call her for follow-up purposes during the study?')),
                ('may_sms_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True,
                                                       verbose_name='Has the participant given his/her permission for study staff to SMS her for follow-up purposes during the study?')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                     max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                         max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                      max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                          max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Doesnt_work', 'Doesnt Work')], max_length=25,
                                                   verbose_name='Has the participant given his/her permission for study staff to contact her at work for follow up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Work contact number ')),
                ('may_contact_someone', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...',
                                                         max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact anyone else for follow-up purposes during the study?')),
                ('contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Full physical address ')),
                ('contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                     max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                      max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                                max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25,
                                                     verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                               max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                        max_length=71, null=True, validators=[edc_base.bw.validators.BWTelephoneNumber], verbose_name='Telephone number')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'historical Subject Locator',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(
                    max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(
                    editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(
                    editable=False, max_length=25)),
                ('visit_code', models.CharField(
                    editable=False, max_length=25, null=True)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[
                 edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>',
                                            max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>',
                                                  max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True,
                                                   verbose_name="If \\missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(
                    max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(
                    blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), (
                    'unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[
                 edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True,
                                              verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason_unscheduled', models.CharField(blank=True, choices=[('Routine oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('Ill oncology', 'Ill oncology clinic visit'), (
                    'Patient called', 'Patient called to come for visit'), ('OTHER', 'Other, specify:')], max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'historical subject visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='ResultItem',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(null=True)),
                ('utestid', models.CharField(max_length=25, null=True)),
                ('value', models.CharField(max_length=25, null=True)),
                ('quantifier', models.CharField(max_length=25, null=True)),
                ('value_datetime', models.DateTimeField(null=True)),
                ('reference', models.CharField(max_length=25, null=True)),
                ('pending_datetime', models.DateTimeField(
                    default=django.utils.timezone.now)),
                ('pending', models.BooleanField(default=True)),
                ('resulted_datetime', models.DateTimeField(null=True)),
                ('resulted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(
                    max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=edc_base.utils.get_uuid,
                                                              editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.',
                                                            max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, editable=False,
                                          help_text='a field used for quick search', max_length=250, null=True)),
                ('citizen', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A',
                                                    help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A',
                                                          help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY',
                                                             max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[
                 django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(
                    help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), (
                    'YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[
                 ('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)",
                                                                                           max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the client')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the client had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='I have asked the client questions about this study and they have demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[
                 edc_consent.validators.eligible_if_yes], verbose_name='The client has signed the consent form?')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy to the clinic with the consent', max_length=20, null=True, validators=[
                 edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the client with a copy of their signed informed consent')),
                ('may_store_samples', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the subject agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='-', help_text="( if 'Yes' STOP patient cannot be consented )",
                                                     max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant LITERATE?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)",
                                                                                          max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's Last and first name (illiterates only)")),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English')], default='not specified',
                                              help_text='The language used for the edc_consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(
                    default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(
                    editable=False, null=True)),
                ('verified_by', models.CharField(
                    editable=False, max_length=25, null=True)),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(
                    blank=True, help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('identity_type', edc_base.model_fields.custom_fields.IdentityTypeField(choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), (
                    'PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(
                    blank=True, help_text='Retype the identity number from the identity card (Encryption: RSA local)', max_length=71, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[
                 edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False,
                                             help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.',
                                         max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.',
                                                max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False,
                                                        help_text='A unique identifier for this consent instance')),
                ('is_signed', models.BooleanField(
                    default=False, editable=False)),
            ],
            options={
                'ordering': ('-created',),
                'abstract': False,
                'get_latest_by': 'consent_datetime',
            },
            bases=(django_crypto_fields.mixins.CryptoMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectLocator',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(
                    max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(
                    default=edc_base.utils.get_utcnow)),
                ('date_signed', models.DateField(
                    default=datetime.date.today, verbose_name='Date Locator Form signed ')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Mailing address ')),
                ('home_visit_permission', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to make home visits for follow-up purposes during the study?')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Physical address with detailed description')),
                ('may_follow_up', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to call her for follow-up purposes during the study?')),
                ('may_sms_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True,
                                                       verbose_name='Has the participant given his/her permission for study staff to SMS her for follow-up purposes during the study?')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                     max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                         max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                      max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                          max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Doesnt_work', 'Doesnt Work')], max_length=25,
                                                   verbose_name='Has the participant given his/her permission for study staff to contact her at work for follow up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Work contact number ')),
                ('may_contact_someone', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...',
                                                         max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact anyone else for follow-up purposes during the study?')),
                ('contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Full physical address ')),
                ('contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                     max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                      max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                                max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25,
                                                     verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                               max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)',
                                                                                                        max_length=71, null=True, validators=[edc_base.bw.validators.BWTelephoneNumber], verbose_name='Telephone number')),
            ],
            options={
                'verbose_name': 'Subject Locator',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('slug', models.CharField(db_index=True, editable=False,
                                          help_text='a field used for quick search', max_length=250, null=True)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('requisition_identifier', models.CharField(
                    editable=False, max_length=50, unique=True, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(
                    editable=False, max_length=50, null=True, unique=True)),
                ('primary_aliquot_identifier', models.CharField(
                    editable=False, max_length=18, null=True, unique=True)),
                ('panel_name', models.CharField(max_length=25)),
                ('requisition_datetime', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(
                    blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn', models.CharField(choices=[('N/A', 'Not applicable'), ('collection_failed', 'Tried, but unable obtaining sample from patient'), (
                    'absent', 'Patient did not attend visit'), ('refused', 'Patient refused'), ('no_supplies', 'No supplies')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('study_site', models.CharField(
                    blank=True, max_length=10, null=True)),
                ('study_site_name', models.CharField(
                    blank=True, max_length=25, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(
                    blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(
                    blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), (
                    'dbs', 'DBS Card'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.IntegerField(
                    blank=True, help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', null=True, verbose_name='Number of items')),
                ('estimated_volume', models.DecimalField(blank=True, decimal_places=2,
                                                         help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, null=True, verbose_name='Estimated volume in mL')),
                ('comments', models.TextField(
                    blank=True, max_length=25, null=True)),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(
                    blank=True, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.",
                                                         validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(
                    max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(
                    editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(
                    editable=False, max_length=25)),
                ('visit_code', models.CharField(
                    editable=False, max_length=25, null=True)),
                ('consent_version', models.CharField(
                    default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[
                 edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>',
                                            max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>',
                                                  max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[
                 ('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True,
                                                   verbose_name="If \\missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(
                    max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(
                    blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), (
                    'unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[
                 edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True,
                                              verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason_unscheduled', models.CharField(blank=True, choices=[('Routine oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('Ill oncology', 'Ill oncology clinic visit'), (
                    'Patient called', 'Patient called to come for visit'), ('OTHER', 'Other, specify:')], max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('appointment', models.OneToOneField(
                    on_delete=django.db.models.deletion.PROTECT, to='edc_appointment.Appointment')),
            ],
            options={
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'report_datetime'),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='subjectrequisition',
            name='subject_visit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectconsent',
            unique_together=set(
                [('subject_identifier', 'version'), ('first_name', 'dob', 'initials', 'version')]),
        ),
    ]
