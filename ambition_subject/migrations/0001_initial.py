# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-10 05:58
from __future__ import unicode_literals

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_crypto_fields.mixins
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.phone
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('edc_lab', '__first__'),
        ('ambition_screening', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdverseEvent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('ae_description', models.TextField(verbose_name='Adverse Event (AE) description')),
                ('ae_awareness_date', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='AE Awareness date')),
                ('ae_start_date', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Actual Start Date of AE')),
                ('ae_severity_grade', models.CharField(choices=[('grade_4', 'Grade 4- Life-threatening'), ('grade_5', 'Grade 5- Death')], max_length=25, verbose_name='Severity of AE')),
                ('ae_intensity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], max_length=25, verbose_name='What is the intensity AE')),
                ('regimen', models.CharField(choices=[('regimen_1', 'Regimen 1 (Ambisome 10 mg/kg day 1 (single dose) + fluconazole 1200mg/day + flucytosine 100mg/kg/day for 14 days) '), ('regimen_2', 'Regimen 2 (Amphotericin B 1 mg/kg + flucytocine 100mg/kg/day for 14 days) ')], max_length=50, verbose_name='Patient’s treatment regimen')),
                ('ae_study_relation_possibility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Is the incident related to the patient involvement in the study?')),
                ('ambisome_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Ambisome:')),
                ('fluconazole_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Fluconozole:')),
                ('amphotericin_b_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Amphotericin B:')),
                ('flucytosine_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Flucytosine:')),
                ('details_last_study_drug', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Details of the last implicated drug (name, dose, route):')),
                ('med_administered_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time of last implicated study medication administered')),
                ('ae_cause', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Has a reason other than the specified study drug been  identified as the cause of the event(s)?')),
                ('ae_cause_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('ae_treatment', models.TextField(verbose_name='Specify action taken for treatment of AE:')),
                ('ae_cm_recurrence', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='unknown', help_text='If yes, fill in the Recurrence of Symptoms form', max_length=10, verbose_name='Was the AE a recurrence of CM symptoms?')),
                ('is_sa_event', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(i.e. results in death, in-patient hospitalisation/prolongation, significant disability or is life-threatening)', max_length=5, verbose_name='Is this event a SAE?')),
                ('sae_possibility', models.CharField(choices=[('N/A', 'Not applicable'), ('death', 'Death (Please complete Death form and Study termination form)'), ('life_threatening', 'Life-threatening'), ('significant_disability', 'Significant disability'), ('in-patient_hospitalization or prolongation', 'In-patient hospitalization or prolongation (beyond 2 weeks from study inclusion)'), ('Medically_important_event', 'Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)')], default='N/A', max_length=50, verbose_name='If Yes, Reason for SAE:')),
                ('susar_possility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is this a Suspected Unexpected Serious Adverse Reaction (SUSAR)?')),
                ('susar_reported', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If yes, SUSAR must be reported to Principal Investigator and TMG immediately, is SUSAR Reported?')),
                ('susar_reported_datetime', models.DateTimeField(blank=True, help_text='AEs ≥ Grade 3 or SAE must be reported to the Trial Management Group (TMG) within 48hrs (Email to: ambition_tmg@sgul.ac.uk)', null=True, verbose_name='Date and time AE reported')),
            ],
            options={
                'verbose_name': 'Adverse Event',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdverseEventFollowUp',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('physical_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Physical symptoms')),
                ('headache', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Headache')),
                ('visual_acuity_left_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Left Eye')),
                ('visual_acuity_right_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Right Eye')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', null=True, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(3)], verbose_name='Glasgow Coma Score')),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Confusion')),
                ('recent_seizure_less_72', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Recent seizure (<72 hrs)')),
                ('cn_palsy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='CN palsy')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Behaviour change')),
                ('focal_neurology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Focal neurology')),
                ('tb_pulmonary_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Pulmonary TB diagnosis since the last visit?')),
                ('tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of pulmonary TB diagnosis:')),
                ('extra_pulmonary_tb_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Extra pulmonary TB diagnosis since the last visit?')),
                ('extra_tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Extra Pulmonary TB diagnosis:')),
                ('kaposi_sarcoma_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name="Kaposi's sarcoma diagnosis since the last visit?")),
                ('kaposi_sarcoma_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="Date of Kaposi's sarcoma diagnosis:")),
                ('malaria_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Malaria diagnosis since the last visit?')),
                ('malaria_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of malaria diagnosis:')),
                ('bacteraemia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacteraemia diagnosis since the last visit?')),
                ('bacteraemia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacteraemia diagnosis:')),
                ('pneumonia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacterial pneumonia diagnosis since the last visit?')),
                ('pneumonia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacterial pneumonia diagnosis:')),
                ('diarrhoeal_wasting_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Diarrhoeal wasting diagnosis since the last visit?')),
                ('diarrhoeal_wasting_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of diarrhoeal wasting diagnosis:')),
                ('other_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Other significant diagnosis?')),
                ('other_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of other significant diagnosis:')),
                ('outcome', models.CharField(choices=[('Recovered', 'Recovered'), ('Recovering', 'Recovering'), ('Not Recovered', 'Not Recovered'), ('Unknown', 'Unknown/Lost to follow-up'), ('Recovered with sequelae', 'Recovered with sequelae'), ('Severity worsened to Grade 4', 'Severity worsened to Grade 4'), ('Death', 'Death')], max_length=5)),
                ('outcome_date', models.DateField(help_text='Date of Outcome', validators=[edc_base.model_validators.date.date_not_future])),
                ('relevant_history', models.TextField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Indicate Adverse Event, Clinical results,medications given, dosage,treatment plan and outcomes.', max_length=1000, verbose_name='Description Summary Of Adverse Event Outcome')),
            ],
        ),
        migrations.CreateModel(
            name='AdverseEventTMG',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('ae_received_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time AE form received:')),
                ('clinical_review_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Date and time of Clinical Review: ')),
                ('investigator_comments', models.TextField(blank=True, null=True, verbose_name='Investigator Comments:')),
                ('ae_description', models.TextField(blank=True, null=True, verbose_name='Description of AE:')),
                ('officials_notified', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time Regulatory authorities notified (SUSARs)')),
                ('investigator_returned', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time form logged in data base and returnedto Local Investigator')),
            ],
            options={
                'verbose_name_plural': 'Adverse Event TMG',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AEClassification',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AmphotericinMissedDoses',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('day_missed', models.IntegerField(choices=[(1, 'Day 1'), (2, 'Day 2'), (3, 'Day 3'), (4, 'Day 4'), (5, 'Day 5'), (6, 'Day 6'), (7, 'Day 7'), (8, 'Day 8'), (9, 'Day 9'), (10, 'Day 10'), (11, 'Day 11'), (12, 'Day 12'), (13, 'Day 13'), (14, 'Day 14')], verbose_name='Day:')),
                ('ampho_missed_reason', models.CharField(choices=[('administered_to_protocol', 'Administered according to protocol'), ('toxicity', 'Toxicity'), ('missed', 'Missed'), ('refused', 'Refused'), ('not_required_acc_protocol', 'Not required according to protocol'), ('OTHER', 'Other')], max_length=25, verbose_name='Were any drug doses missed?')),
                ('ampho_missed_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
            ],
        ),
        migrations.CreateModel(
            name='Antibiotic',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AntibioticTreatment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('timepoint', models.DecimalField(decimal_places=1, editable=False, help_text='timepoint from schedule', max_digits=6, null=True)),
                ('timepoint_datetime', models.DateTimeField(editable=False, help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(editable=False, help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(max_length=25)),
                ('visit_instance', models.CharField(blank=True, db_index=True, default='0', help_text='A decimal to represent an additional report to be included with the original visit report. (NNNN.0)', max_length=1, null=True, validators=[django.core.validators.RegexValidator('[0-9]', 'Must be a number from 0-9')], verbose_name='Instance')),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('telephone', 'By telephone'), ('home', 'At home')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(blank=True, help_text='Reason for appointment', max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'ordering': ('timepoint_datetime',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BloodResult',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('wbc', models.DecimalField(decimal_places=1, help_text='units in 10^3/μL', max_digits=4, null=True)),
                ('platelets', models.IntegerField(help_text='units in 10^9/L', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)])),
                ('haemoglobin', models.DecimalField(decimal_places=1, help_text='units in g/dL', max_digits=4, null=True)),
                ('absolute_neutrophil', models.DecimalField(decimal_places=2, help_text='units in 10^3/μL', max_digits=4, null=True)),
                ('creatinine', models.DecimalField(decimal_places=2, help_text='units in  mg/dL or μmol/L', max_digits=6)),
                ('creatinine_unit', models.CharField(choices=[('mg/dL', 'mg/dL'), ('umol/L', 'μmol/L')], max_length=6)),
                ('sodium', models.IntegerField(help_text='units in mmol/L', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)])),
                ('potassium', models.DecimalField(decimal_places=1, help_text='units in mmol/L', max_digits=2)),
                ('magnesium', models.DecimalField(decimal_places=2, help_text='units in  mg/dL or mmol/L', max_digits=6)),
                ('magnesium_unit', models.CharField(choices=[('mg/dL', 'mg/dL'), ('mmol/L', 'mmol/L')], max_length=6)),
                ('alt', models.IntegerField(help_text='units in U/L', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='ALT')),
                ('urea', models.DecimalField(decimal_places=2, help_text='units in  mg/dL or mmol/L', max_digits=6)),
                ('urea_unit', models.CharField(choices=[('mg/dL', 'mg/dL'), ('mmol/L', 'mmol/L')], max_length=6)),
                ('abs_cd4', models.IntegerField(blank=True, help_text='units in /mm^3', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)])),
                ('proteinuria', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True)),
                ('are_results_normal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('abnormal_results_in_ae_range', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If results abnormal, are results within Grade III/IV AE range?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicNote',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('subjective', models.TextField(max_length=1000)),
                ('vital_signs', models.TextField(max_length=100)),
                ('cvs', models.TextField(max_length=100)),
                ('resp', models.TextField(max_length=100)),
                ('neuro', models.TextField(max_length=100)),
                ('assessment', models.TextField(max_length=100)),
                ('plan', models.TextField(max_length=1000)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Day14Medication',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeathReport',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('death_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future])),
                ('study_day', models.CharField(max_length=2, verbose_name='Study Day')),
                ('death_as_inpatient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Death as inpatient')),
                ('cause_of_death_study_doctor_opinion', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of local study Dr and local PI)')),
                ('cause_other_study_doctor_opinion', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('cause_tb_study_doctor_opinion', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('cause_of_death_tmg1_opinion', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of TMG member 1)')),
                ('cause_of_death_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, complete Q10 below', max_length=5, verbose_name='Cause of death agreed between Study dr and TMG member?')),
                ('cause_other_tmg1_opinion', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('cause_tb_tmg1_opinion', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('cause_of_death_tmg2_opinion', models.CharField(blank=True, choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, null=True, verbose_name='Main cause of death (opinion of TMG member 2)')),
                ('cause_other_tmg2_opinion', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('cause_tb_tmg2_opinion', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(blank=True, null=True, verbose_name='Narrative')),
            ],
        ),
        migrations.CreateModel(
            name='Disenrollment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('disenrollment_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('facility_name', models.CharField(default='clinic', help_text='The facility name is need when scheduling appointments', max_length=25, verbose_name='To which facility is this subject being enrolled?')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_identifier', models.UUIDField()),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
            options={
                'verbose_name': 'Enrollment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FluconazoleMissedDoses',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('day_missed', models.IntegerField(choices=[(1, 'Day 1'), (2, 'Day 2'), (3, 'Day 3'), (4, 'Day 4'), (5, 'Day 5'), (6, 'Day 6'), (7, 'Day 7'), (8, 'Day 8'), (9, 'Day 9'), (10, 'Day 10'), (11, 'Day 11'), (12, 'Day 12'), (13, 'Day 13'), (14, 'Day 14')], verbose_name='Day missed:')),
                ('flucon_missed_reason', models.CharField(blank=True, choices=[('administered_to_protocol', 'Administered according to protocol'), ('toxicity', 'Toxicity'), ('missed', 'Missed'), ('refused', 'Refused'), ('not_required_acc_protocol', 'Not required according to protocol'), ('OTHER', 'Other')], max_length=25, verbose_name='Reason:')),
                ('flucon_missed_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
            ],
        ),
        migrations.CreateModel(
            name='FollowUp',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('physical_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Physical symptoms')),
                ('headache', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Headache')),
                ('visual_acuity_left_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Left Eye')),
                ('visual_acuity_right_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Right Eye')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', null=True, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(3)], verbose_name='Glasgow Coma Score')),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Confusion')),
                ('recent_seizure_less_72', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Recent seizure (<72 hrs)')),
                ('cn_palsy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='CN palsy')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Behaviour change')),
                ('focal_neurology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Focal neurology')),
                ('tb_pulmonary_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Pulmonary TB diagnosis since the last visit?')),
                ('tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of pulmonary TB diagnosis:')),
                ('extra_pulmonary_tb_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Extra pulmonary TB diagnosis since the last visit?')),
                ('extra_tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Extra Pulmonary TB diagnosis:')),
                ('kaposi_sarcoma_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name="Kaposi's sarcoma diagnosis since the last visit?")),
                ('kaposi_sarcoma_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="Date of Kaposi's sarcoma diagnosis:")),
                ('malaria_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Malaria diagnosis since the last visit?')),
                ('malaria_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of malaria diagnosis:')),
                ('bacteraemia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacteraemia diagnosis since the last visit?')),
                ('bacteraemia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacteraemia diagnosis:')),
                ('pneumonia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacterial pneumonia diagnosis since the last visit?')),
                ('pneumonia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacterial pneumonia diagnosis:')),
                ('diarrhoeal_wasting_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Diarrhoeal wasting diagnosis since the last visit?')),
                ('diarrhoeal_wasting_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of diarrhoeal wasting diagnosis:')),
                ('other_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Other significant diagnosis?')),
                ('other_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of other significant diagnosis:')),
                ('fluconazole_dose', models.CharField(choices=[('800mg_daily', '800mg Daily'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='Fluconazole dose (Day prior to visit)')),
                ('fluconazole_dose_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, choices=[('800mg_daily', '800mg Daily'), ('OTHER', 'Other, specify')], editable=True, max_length=25, verbose_name='...if "Other", specify')),
                ('rifampicin_started', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Rifampicin started since last visit?')),
                ('rifampicin_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date rifampicin started')),
                ('fu_narrative', models.TextField(blank=True, max_length=300, null=True, verbose_name='Narrative')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalAdverseEvent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('ae_description', models.TextField(verbose_name='Adverse Event (AE) description')),
                ('ae_awareness_date', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='AE Awareness date')),
                ('ae_start_date', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Actual Start Date of AE')),
                ('ae_severity_grade', models.CharField(choices=[('grade_4', 'Grade 4- Life-threatening'), ('grade_5', 'Grade 5- Death')], max_length=25, verbose_name='Severity of AE')),
                ('ae_intensity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], max_length=25, verbose_name='What is the intensity AE')),
                ('regimen', models.CharField(choices=[('regimen_1', 'Regimen 1 (Ambisome 10 mg/kg day 1 (single dose) + fluconazole 1200mg/day + flucytosine 100mg/kg/day for 14 days) '), ('regimen_2', 'Regimen 2 (Amphotericin B 1 mg/kg + flucytocine 100mg/kg/day for 14 days) ')], max_length=50, verbose_name='Patient’s treatment regimen')),
                ('ae_study_relation_possibility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Is the incident related to the patient involvement in the study?')),
                ('ambisome_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Ambisome:')),
                ('fluconazole_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Fluconozole:')),
                ('amphotericin_b_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Amphotericin B:')),
                ('flucytosine_relation', models.CharField(choices=[('not_related', 'Not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related'), ('unlikely_related', 'Unlikely related'), ('N/A', 'Not Applicable')], max_length=25, verbose_name='Relationship to Flucytosine:')),
                ('details_last_study_drug', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Details of the last implicated drug (name, dose, route):')),
                ('med_administered_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time of last implicated study medication administered')),
                ('ae_cause', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Has a reason other than the specified study drug been  identified as the cause of the event(s)?')),
                ('ae_cause_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('ae_treatment', models.TextField(verbose_name='Specify action taken for treatment of AE:')),
                ('ae_cm_recurrence', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='unknown', help_text='If yes, fill in the Recurrence of Symptoms form', max_length=10, verbose_name='Was the AE a recurrence of CM symptoms?')),
                ('is_sa_event', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(i.e. results in death, in-patient hospitalisation/prolongation, significant disability or is life-threatening)', max_length=5, verbose_name='Is this event a SAE?')),
                ('sae_possibility', models.CharField(choices=[('N/A', 'Not applicable'), ('death', 'Death (Please complete Death form and Study termination form)'), ('life_threatening', 'Life-threatening'), ('significant_disability', 'Significant disability'), ('in-patient_hospitalization or prolongation', 'In-patient hospitalization or prolongation (beyond 2 weeks from study inclusion)'), ('Medically_important_event', 'Medically important event (e.g. Severe thrombophlebitis, Bacteraemia, recurrence of symptoms not requiring admission, Hospital acquired pneumonia)')], default='N/A', max_length=50, verbose_name='If Yes, Reason for SAE:')),
                ('susar_possility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is this a Suspected Unexpected Serious Adverse Reaction (SUSAR)?')),
                ('susar_reported', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If yes, SUSAR must be reported to Principal Investigator and TMG immediately, is SUSAR Reported?')),
                ('susar_reported_datetime', models.DateTimeField(blank=True, help_text='AEs ≥ Grade 3 or SAE must be reported to the Trial Management Group (TMG) within 48hrs (Email to: ambition_tmg@sgul.ac.uk)', null=True, verbose_name='Date and time AE reported')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Adverse Event',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAdverseEventTMG',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('ae_received_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time AE form received:')),
                ('clinical_review_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Date and time of Clinical Review: ')),
                ('investigator_comments', models.TextField(blank=True, null=True, verbose_name='Investigator Comments:')),
                ('ae_description', models.TextField(blank=True, null=True, verbose_name='Description of AE:')),
                ('officials_notified', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time Regulatory authorities notified (SUSARs)')),
                ('investigator_returned', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date and time form logged in data base and returnedto Local Investigator')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical adverse event tmg',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAmphotericinMissedDoses',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('day_missed', models.IntegerField(choices=[(1, 'Day 1'), (2, 'Day 2'), (3, 'Day 3'), (4, 'Day 4'), (5, 'Day 5'), (6, 'Day 6'), (7, 'Day 7'), (8, 'Day 8'), (9, 'Day 9'), (10, 'Day 10'), (11, 'Day 11'), (12, 'Day 12'), (13, 'Day 13'), (14, 'Day 14')], verbose_name='Day:')),
                ('ampho_missed_reason', models.CharField(choices=[('administered_to_protocol', 'Administered according to protocol'), ('toxicity', 'Toxicity'), ('missed', 'Missed'), ('refused', 'Refused'), ('not_required_acc_protocol', 'Not required according to protocol'), ('OTHER', 'Other')], max_length=25, verbose_name='Were any drug doses missed?')),
                ('ampho_missed_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical amphotericin missed doses',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAppointment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('timepoint', models.DecimalField(decimal_places=1, editable=False, help_text='timepoint from schedule', max_digits=6, null=True)),
                ('timepoint_datetime', models.DateTimeField(editable=False, help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(editable=False, help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(max_length=25)),
                ('visit_instance', models.CharField(blank=True, db_index=True, default='0', help_text='A decimal to represent an additional report to be included with the original visit report. (NNNN.0)', max_length=1, null=True, validators=[django.core.validators.RegexValidator('[0-9]', 'Must be a number from 0-9')], verbose_name='Instance')),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('telephone', 'By telephone'), ('home', 'At home')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(blank=True, help_text='Reason for appointment', max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical appointment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalBloodResult',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('wbc', models.DecimalField(decimal_places=1, help_text='units in 10^3/μL', max_digits=4, null=True)),
                ('platelets', models.IntegerField(help_text='units in 10^9/L', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999)])),
                ('haemoglobin', models.DecimalField(decimal_places=1, help_text='units in g/dL', max_digits=4, null=True)),
                ('absolute_neutrophil', models.DecimalField(decimal_places=2, help_text='units in 10^3/μL', max_digits=4, null=True)),
                ('creatinine', models.DecimalField(decimal_places=2, help_text='units in  mg/dL or μmol/L', max_digits=6)),
                ('creatinine_unit', models.CharField(choices=[('mg/dL', 'mg/dL'), ('umol/L', 'μmol/L')], max_length=6)),
                ('sodium', models.IntegerField(help_text='units in mmol/L', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)])),
                ('potassium', models.DecimalField(decimal_places=1, help_text='units in mmol/L', max_digits=2)),
                ('magnesium', models.DecimalField(decimal_places=2, help_text='units in  mg/dL or mmol/L', max_digits=6)),
                ('magnesium_unit', models.CharField(choices=[('mg/dL', 'mg/dL'), ('mmol/L', 'mmol/L')], max_length=6)),
                ('alt', models.IntegerField(help_text='units in U/L', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='ALT')),
                ('urea', models.DecimalField(decimal_places=2, help_text='units in  mg/dL or mmol/L', max_digits=6)),
                ('urea_unit', models.CharField(choices=[('mg/dL', 'mg/dL'), ('mmol/L', 'mmol/L')], max_length=6)),
                ('abs_cd4', models.IntegerField(blank=True, help_text='units in /mm^3', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)])),
                ('proteinuria', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True)),
                ('are_results_normal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('abnormal_results_in_ae_range', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If results abnormal, are results within Grade III/IV AE range?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical blood result',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDeathReport',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('death_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future])),
                ('study_day', models.CharField(max_length=2, verbose_name='Study Day')),
                ('death_as_inpatient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Death as inpatient')),
                ('cause_of_death_study_doctor_opinion', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of local study Dr and local PI)')),
                ('cause_other_study_doctor_opinion', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('cause_tb_study_doctor_opinion', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('cause_of_death_tmg1_opinion', models.CharField(choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, verbose_name='Main cause of death (opinion of TMG member 1)')),
                ('cause_of_death_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, complete Q10 below', max_length=5, verbose_name='Cause of death agreed between Study dr and TMG member?')),
                ('cause_other_tmg1_opinion', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('cause_tb_tmg1_opinion', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('cause_of_death_tmg2_opinion', models.CharField(blank=True, choices=[('cryptococcal_meningitis', 'Cryptococcal meningitis'), ('Cryptococcal_meningitis_relapse_IRIS', 'Cryptococcal meningitis relapse/IRIS'), ('TB', 'TB'), ('bacteraemia', 'Bacteraemia'), ('bacterial_pneumonia', 'Bacterial pneumonia'), ('malignancy', 'Malignancy'), ('art_toxicity', 'ART toxicity'), ('IRIS_non_CM', 'IRIS non-CM'), ('diarrhea_wasting', 'Diarrhea/wasting'), ('unknown', 'Unknown'), ('OTHER', 'Other, specify')], help_text='Tick only 1:(NB. Fill in AE CRF)', max_length=50, null=True, verbose_name='Main cause of death (opinion of TMG member 2)')),
                ('cause_other_tmg2_opinion', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('cause_tb_tmg2_opinion', models.CharField(blank=True, choices=[('meningitis', 'Meningitis'), ('pulmonary', 'Pulmonary'), ('disseminated', 'Disseminated')], max_length=25, null=True, verbose_name='If cause of death is TB, specify site of TB disease')),
                ('death_narrative', models.TextField(blank=True, null=True, verbose_name='Narrative')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical death report',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalEnrollment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('facility_name', models.CharField(default='clinic', help_text='The facility name is need when scheduling appointments', max_length=25, verbose_name='To which facility is this subject being enrolled?')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_identifier', models.UUIDField()),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Enrollment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalFluconazoleMissedDoses',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('day_missed', models.IntegerField(choices=[(1, 'Day 1'), (2, 'Day 2'), (3, 'Day 3'), (4, 'Day 4'), (5, 'Day 5'), (6, 'Day 6'), (7, 'Day 7'), (8, 'Day 8'), (9, 'Day 9'), (10, 'Day 10'), (11, 'Day 11'), (12, 'Day 12'), (13, 'Day 13'), (14, 'Day 14')], verbose_name='Day missed:')),
                ('flucon_missed_reason', models.CharField(blank=True, choices=[('administered_to_protocol', 'Administered according to protocol'), ('toxicity', 'Toxicity'), ('missed', 'Missed'), ('refused', 'Refused'), ('not_required_acc_protocol', 'Not required according to protocol'), ('OTHER', 'Other')], max_length=25, verbose_name='Reason:')),
                ('flucon_missed_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical fluconazole missed doses',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalFollowUp',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('physical_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Physical symptoms')),
                ('headache', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Headache')),
                ('visual_acuity_left_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Left Eye')),
                ('visual_acuity_right_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Right Eye')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', null=True, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(3)], verbose_name='Glasgow Coma Score')),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Confusion')),
                ('recent_seizure_less_72', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Recent seizure (<72 hrs)')),
                ('cn_palsy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='CN palsy')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Behaviour change')),
                ('focal_neurology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Focal neurology')),
                ('tb_pulmonary_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Pulmonary TB diagnosis since the last visit?')),
                ('tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of pulmonary TB diagnosis:')),
                ('extra_pulmonary_tb_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Extra pulmonary TB diagnosis since the last visit?')),
                ('extra_tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Extra Pulmonary TB diagnosis:')),
                ('kaposi_sarcoma_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name="Kaposi's sarcoma diagnosis since the last visit?")),
                ('kaposi_sarcoma_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="Date of Kaposi's sarcoma diagnosis:")),
                ('malaria_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Malaria diagnosis since the last visit?')),
                ('malaria_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of malaria diagnosis:')),
                ('bacteraemia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacteraemia diagnosis since the last visit?')),
                ('bacteraemia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacteraemia diagnosis:')),
                ('pneumonia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacterial pneumonia diagnosis since the last visit?')),
                ('pneumonia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacterial pneumonia diagnosis:')),
                ('diarrhoeal_wasting_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Diarrhoeal wasting diagnosis since the last visit?')),
                ('diarrhoeal_wasting_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of diarrhoeal wasting diagnosis:')),
                ('other_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Other significant diagnosis?')),
                ('other_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of other significant diagnosis:')),
                ('fluconazole_dose', models.CharField(choices=[('800mg_daily', '800mg Daily'), ('OTHER', 'Other, specify')], max_length=25, verbose_name='Fluconazole dose (Day prior to visit)')),
                ('fluconazole_dose_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, choices=[('800mg_daily', '800mg Daily'), ('OTHER', 'Other, specify')], editable=True, max_length=25, verbose_name='...if "Other", specify')),
                ('rifampicin_started', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Rifampicin started since last visit?')),
                ('rifampicin_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date rifampicin started')),
                ('fu_narrative', models.TextField(blank=True, max_length=300, null=True, verbose_name='Narrative')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical follow up',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalLumbarPunctureCsf',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('reason_for_lp', models.CharField(choices=[('scheduled_per_protocol', 'Scheduled per protocol'), ('therapeutic_lp', 'Therapeutic LP'), ('suspected_IRIS_relapse', 'Suspected IRIS/Relapse')], max_length=50, verbose_name='Reason for LP')),
                ('opening_pressure', models.IntegerField(help_text='Units cm of H2O', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('closing_pressure', models.IntegerField(blank=True, help_text='Units cm of H2O', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('csf_amount_removed', models.IntegerField(help_text='Do not remove ≥ 40mL CSF. See management of raised ICP WPD', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(40)])),
                ('quantitative_culture', models.IntegerField(blank=True, help_text='Units CFU/ml', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999999)])),
                ('csf_culture', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='CSF culture: Other organism (non-crytococcus)')),
                ('other_csf_culture', models.CharField(blank=True, max_length=75, null=True, verbose_name='If yes, specify organism:')),
                ('csf_wbc_cell_count', models.IntegerField(help_text='acceptable units are mm3', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)], verbose_name='Total CSF WBC cell count:')),
                ('differential_lymphocyte_count', models.IntegerField(blank=True, help_text='acceptable units are mm3 or %', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='Differential lymphocyte cell count:')),
                ('differential_lymphocyte_unit', models.CharField(choices=[('mm3', 'mm3'), ('%', '%'), ('N/A', 'Not Applicable')], default='N/A', max_length=6)),
                ('differential_neutrophil_count', models.IntegerField(blank=True, help_text='acceptable units are mm3 or %', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='Differential neutrophil cell count:')),
                ('differential_neutrophil_unit', models.CharField(choices=[('mm3', 'mm3'), ('%', '%'), ('N/A', 'Not Applicable')], default='N/A', max_length=3)),
                ('india_ink', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate'), ('not_done', 'Not Done')], max_length=15, null=True)),
                ('csf_glucose', models.DecimalField(blank=True, decimal_places=1, help_text='Units in mmol/L or mg/dL', max_digits=3, null=True)),
                ('csf_glucose_units', models.CharField(blank=True, choices=[('mg/dL', 'mg/dL'), ('mmol/L', 'mmol/L')], default='N/A', max_length=6, null=True)),
                ('csf_protein', models.DecimalField(blank=True, decimal_places=1, help_text='Units in g/dL', max_digits=3, null=True)),
                ('csf_cr_ag', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate'), ('not_done', 'Not Done')], max_length=15, null=True, verbose_name='CSF CrAg:')),
                ('csf_cr_ag_lfa', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='CSF CrAG done by CSF CrAG LFA:')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Lumbar Puncture/Cerebrospinal Fluid',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalMicrobiology',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('urine_culture_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='only for patients with >50 white cells in urine', max_length=5)),
                ('date_urine_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('urine_culture_results', models.CharField(choices=[('N/A', 'Not applicable'), ('no_growth', 'No growth'), ('POS', 'Positive')], default='N/A', max_length=10, verbose_name='Urine culture results, if completed')),
                ('urine_culture_organism', models.CharField(choices=[('N/A', 'Not Applicable'), ('e.coli', 'E.coli'), ('klebsiella_sp', 'Klebsiella sp.'), ('OTHER', 'Other, specify:')], default='N/A', max_length=25, verbose_name='If Positive, organism:')),
                ('urine_culture_organism_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('blood_culture_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('blood_culture_results', models.CharField(choices=[('N/A', 'Not applicable'), ('no_growth', 'No growth'), ('POS', 'Positive')], default='N/A', max_length=10, verbose_name='Blood culture results, if completed:')),
                ('date_blood_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('day_blood_taken', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(70)], verbose_name='If Positive, Study day positive culture sample taken:')),
                ('blood_culture_organism', models.CharField(choices=[('N/A', 'Not applicable'), ('cryptococcus_neoformans', 'Cryptococcus neoformans'), ('bacteria', 'Bacteria'), ('OTHER', 'Other, specify')], default='N/A', max_length=50, verbose_name='If growth positive, organism:')),
                ('blood_culture_organism_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, specify:')),
                ('bacteria_identified', models.CharField(choices=[('N/A', 'Not applicable'), ('e.coli', 'E.coli'), ('klebsiella_sp', 'Klebsiella sp'), ('streptococcus_pneumoniae', 'Streptococcus pneumoniae'), ('staphylococus_aureus', '(Sensitive) Staphylococus aureus'), ('mrsa', 'MRSA'), ('OTHER', 'Other, specify')], default='N/A', max_length=50, verbose_name='If bacteria, type:')),
                ('bacteria_identified_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, specify:')),
                ('sputum_afb_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was sputum afb done?', max_length=5, verbose_name='afb microscopy performed?')),
                ('date_sputum_afb_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('sputum_results_afb', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('N/A', 'Not applicable')], max_length=10, verbose_name='afb results')),
                ('sputum_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was sputum culture done?', max_length=5, verbose_name='Culture performed?')),
                ('date_sputum_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('sputum_results_culture', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('N/A', 'Not applicable')], max_length=10, verbose_name='Culture results:')),
                ('sputum_results_positive', models.CharField(blank=True, max_length=50, null=True, verbose_name='If culture is positive, please specify:')),
                ('sputum_genexpert_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was sputum gene expert done?', max_length=5)),
                ('date_sputum_genexpert_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('sputum_result_genexpert', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('N/A', 'Not applicable')], max_length=15, verbose_name='Gene expert results:')),
                ('tissue_biopsy_taken', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('tissue_biopsy_results', models.CharField(choices=[('N/A', 'Not applicable'), ('no_growth', 'No growth'), ('POS', 'Positive')], default='N/A', max_length=10, verbose_name='If yes, results:')),
                ('date_biopsy_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('day_biopsy_taken', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(70)], verbose_name='If Positive, Study day positive culture sample taken:')),
                ('tissue_biopsy_organism', models.CharField(choices=[('N/A', 'Not applicable'), ('cryptococcus_neoformans', 'Cryptococcus neoformans'), ('mycobacterium_tuberculosis', 'Mycobacterium Tuberculosis'), ('OTHER', 'If other, please specify')], default='N/A', max_length=50, verbose_name='If growth positive, organism:')),
                ('tissue_biopsy_organism_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('histopathology_report', models.TextField(blank=True, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical microbiology',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalMissedVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('missed_study_visit_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future])),
                ('visit_missed', models.DecimalField(decimal_places=1, help_text='Insert visit code', max_digits=3)),
                ('missed_visit_reason_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other reason, please specify:')),
                ('notes_or_action_taken', models.TextField()),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical missed visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPatientHistory',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('headache_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If headache, how many days did it last?')),
                ('visual_loss_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If visual loss, how many days did it last?')),
                ('med_history', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Previous medical history of Tubercolosis?')),
                ('tb_site', models.CharField(choices=[('N/A', 'Not Applicable'), ('pulmonary', 'Pulmonary'), ('extra_pulmonary', 'Extra pulmonary')], default='N/A', max_length=15, verbose_name='If Yes, site of TB?')),
                ('tb_treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Are you currently taking TB treatment?')),
                ('taking_rifampicin', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If yes, are you currently also taking Rifampicin?')),
                ('rifampicin_started_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, when did you first start taking Rifampicin?')),
                ('previous_infection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Previous opportunistic infection other than TB?')),
                ('previous_infection_specify', models.CharField(blank=True, max_length=50, null=True, verbose_name='If yes, specify')),
                ('infection_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, what was the date of infection?')),
                ('new_hiv_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is this a new HIV diagnosis?')),
                ('taking_arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If Yes,Already taking ARVs?')),
                ('arv_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, date ARVs were started.')),
                ('arv_regimen', models.CharField(choices=[('N/A', 'Not Applicable'), ('TDF +3TC/FTC + either EFZ or NVP', 'TDF +3TC/FTC + either EFZ or NVP or or DTG'), ('AZT + 3-TC + either EFV or NVP or DTG', 'AZT + 3-TC + either EFV or NVP or DTG'), ('TDF + 3TC/FTC + either ATZ/r or Lopinavir/r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT + 3TC + either ATZ/r or Lopinavir/r', 'AZT + 3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other, specify')], default='N/A', max_length=50, verbose_name='What ARV regimen are you currently prescribed?')),
                ('arv_regimen_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('first_line_choice', models.CharField(choices=[('N/A', 'Not Applicable'), ('EFV', 'EFV'), ('DTG', 'DTG'), ('NVP', 'NVP')], default='N/A', max_length=5, null=True, verbose_name='If first line:')),
                ('patient_adherence', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Is the patient reportedly adherent?')),
                ('last_dose', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If no, how many months since the last dose was taken?')),
                ('last_viral_load', models.DecimalField(blank=True, decimal_places=3, help_text='copies/mL', max_digits=8, null=True, verbose_name='Last Viral Load, if known?')),
                ('temp', models.DecimalField(decimal_places=1, help_text='°C', max_digits=3, verbose_name='Temperature:')),
                ('heart_rate', models.IntegerField(help_text='bpm', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Heart Rate:')),
                ('blood_pressure', models.CharField(help_text='in mmHg. format SYS/DIA, e.g. 120/80', max_length=6, validators=[django.core.validators.RegexValidator('^\\d{1,3}\\/\\d{1,3}$', message='Enter a valid BP in SYS/DIA format')], verbose_name='Blood Pressure:')),
                ('respiratory_rate', models.IntegerField(help_text='breaths/min', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Respiratory Rate:')),
                ('weight', models.DecimalField(decimal_places=1, help_text='Kg', max_digits=4, verbose_name='Weight:')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)], verbose_name='Glasgow Coma Score:')),
                ('neurological_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('focal_neurologic_deficit', models.TextField(blank=True, null=True, verbose_name='If focal neurologic deficit chosen, please specify details:')),
                ('visual_acuity_day', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Study day visual acuity recorded?')),
                ('left_acuity', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True, verbose_name='Visual acuity Left eye:')),
                ('right_acuity', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True, verbose_name='Visual Acuity Right eye')),
                ('ecog_score', models.CharField(choices=[('0', 'Fully active, able to carry on all pre-disease performance without restriction'), ('1', 'Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work'), ('2', 'Ambulatory and capable of all selfcare but unable to carry out any work activities;up and about more than 50% of waking hours '), ('3', 'Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours'), ('4', 'Completely disabled; cannot carry on any selfcare; totally confined to bed or chair'), ('5', 'Dead')], max_length=15, verbose_name='ECOG Disability score')),
                ('ecog_score_value', models.CharField(choices=[('0', 'Fully active, able to carry on all pre-disease performance without restriction'), ('1', 'Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work'), ('2', 'Ambulatory and capable of all selfcare but unable to carry out any work activities;up and about more than 50% of waking hours '), ('3', 'Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours'), ('4', 'Completely disabled; cannot carry on any selfcare; totally confined to bed or chair'), ('5', 'Dead')], max_length=15, verbose_name='ECOG Score')),
                ('lung_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Abnormal lung exam:')),
                ('cryptococcal_lesions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Cryptococcal related skin lesions:')),
                ('other_meds', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Other medication')),
                ('other_meds_tmp_smx', edc_base.model_fields.custom_fields.OtherCharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], editable=True, verbose_name='...if "Other", specify')),
                ('specify_medications_other', models.TextField(blank=True, max_length=150, null=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical patient history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalProtocolDeviationViolation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('participant_safety_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on safety of the participant')),
                ('participant_safety_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('study_outcomes_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on Study outcomes')),
                ('study_outcomes_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('date_violation_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date violation occured:')),
                ('protocol_violation_type', models.CharField(blank=True, choices=[('failure_to_obtain_informed_consent', 'Failure to obtain informed consent'), ('enrollment_of_ineligible_patient', 'Enrollment of ineligible patient'), ('screening_procedure not done', 'Screening procedure required by protocol not done'), ('screening_or_on-study_procedure', 'Screening or on-study procedure/lab work required not done'), ('incorrect_research_treatment', 'Incorrect research treatment given to patient'), ('procedure_not_completed', 'On-study procedure required by protocol not completed'), ('visit_non-compliance', 'Visit non-compliance'), ('medication_stopped_early', 'Medication stopped early'), ('medication_noncompliance', 'Medication_noncompliance'), ('national_regulations_not_met', 'Standard WPD, ICH-GCP, local/national regulations not met'), ('OTHER', 'Other')], max_length=70, null=True, verbose_name='Type of Protocol Violation/Deviation')),
                ('other_protocol_violation_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify')),
                ('violation_description', models.TextField(blank=True, null=True, verbose_name='Describe the violation fully. How the violation happened, what occurred?')),
                ('violation_reason', models.TextField(blank=True, null=True, verbose_name='Explain the reason why the violation occurred')),
                ('corrective_action_datetime', models.DateTimeField(validators=[edc_base.model_validators.date.date_not_future])),
                ('corrective_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Corrective action taken')),
                ('preventative_action_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('preventative_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Preventative action taken')),
                ('action_required', models.CharField(blank=True, choices=[('participant_to_remain', 'Participant to remain on trial'), ('participant_to_be_withdrawn', 'participant to be withdrawn from trial'), ('patient_remains_on_study', 'Patient remains on study but data analysis will be modified')], max_length=25, null=True, verbose_name='action required')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical protocol deviation violation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRadiology',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('is_cxr_done', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is CXR done')),
                ('cxr_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, when was CXR done')),
                ('cxr_type', models.CharField(choices=[('N/A', 'Not Applicable'), ('NORMAL', 'Normal'), ('hilar_adenopathy', 'Hilar adenopathy'), ('miliary_appearance', 'Miliary appearance'), ('pleural_effusion', 'Pleural effusion'), ('infiltrate_location', 'Infiltrate-Location')], max_length=75, null=True, verbose_name='If yes, specify CXR type:')),
                ('infiltrate_location', models.CharField(choices=[('N/A', 'Not Applicable'), ('lul', 'LUL'), ('lll', 'LLL'), ('rul', 'RUL'), ('rll', 'RLL'), ('rml', 'RML'), ('diffuse', 'Diffuse')], max_length=10, null=True, verbose_name='If CXR type is Infiltrate, please specify location:')),
                ('cxr_description', models.TextField(blank=True, null=True, verbose_name='Description/Comments:')),
                ('is_ct_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='CT/MRI brain scan performed?:')),
                ('date_ct_performed', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, validators=[edc_base.model_validators.date.datetime_not_future])),
                ('is_scanned_with_contrast', models.CharField(choices=[('Yes', 'Yes, (Specify below)'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='CT/MRI brain scan performed with contrast?:')),
                ('brain_imaging_reason', models.CharField(choices=[('N/A', 'Not Applicable'), ('reduction_in_gcs', 'Reduction in GCS'), ('new_neurology', 'New neurology'), ('OTHER', 'Other, specify')], max_length=25, null=True, verbose_name='Reason for brain imaging:')),
                ('brain_imaging_reason_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('are_results_abnormal', models.CharField(choices=[('Yes', 'Yes, (Specify below)'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5)),
                ('abnormal_results_reason', models.CharField(choices=[('N/A', 'Not Applicable'), ('cerebral_oedema', 'Cerebral oedema'), ('hydrocephalus', 'Hydrocephalus'), ('cryptococcomus', 'Cryptococcomus'), ('dilated_virchow_robin_spaces', 'Dilated Virchow robin spaces'), ('enhancing_mass_lesions', 'Enhancing mass lesions DD Toxoplasmosis, TB, lymphoma'), ('infarcts', 'Infarcts'), ('OTHER', 'Other, please specify:')], max_length=50, null=True, verbose_name='If results are abnormal, what is the reason?:')),
                ('abnormal_results_reason_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify reason:')),
                ('if_infarcts_location', models.CharField(blank=True, max_length=50, null=True, verbose_name='If results are abnormal because of Infarcts, what is the location?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical radiology',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRecurrenceSymptom',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('meningitis_symptom_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other symptom, please specify')),
                ('patient_readmitted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If Yes, complete AE CRF.', max_length=5, verbose_name='Has the patient been readmitted due to these recurrent  symptoms?')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)], verbose_name='Score:')),
                ('recent_seizure', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Recent seizure (<72 hrs):')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('focal_neurologic_deficit', models.CharField(blank=True, max_length=15, null=True, verbose_name='If focal neurologic deficit chosen, please specify')),
                ('other_cn_palsy_chosen', models.CharField(blank=True, max_length=15, null=True, verbose_name='If other CN Palsy chosen specify')),
                ('lp_completed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If yes, complete LP form', max_length=5)),
                ('amb_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('amb_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If yes, Specify length of course')),
                ('tb_treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='TB Treatment:')),
                ('steroids_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('steroids_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If yes, Specify length of course:')),
                ('steroids_choices', models.CharField(choices=[('oral_prednisolone', 'Oral prednisolone'), ('iv_dexamethasone', 'IV Dexamethasone used'), ('OTHER', 'Other, specify:')], max_length=25, verbose_name='If Yes')),
                ('steroids_choices_other', models.CharField(blank=True, max_length=50, verbose_name='If other steroids, please specify')),
                ('CD4_count', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='CD4 count (if available)')),
                ('antibiotic_treatment_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other antibiotic treatment, please specify')),
                ('on_arvs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='On ARVS:')),
                ('arv_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Study date ARVs started.')),
                ('arvs_stopped', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='ARVs stopped this clinical episode?')),
                ('narrative_summary', models.TextField(help_text='Please ensure the following forms have been completed: LP, Bloods, Microbiology, Radiology', verbose_name='Narrative Summary of recurrence of symptoms:')),
                ('dr_opinion', models.CharField(choices=[('cm_release', 'CM Relapse'), ('cm_iris', 'CM IRIS'), ('OTHER', 'Other, specify')], max_length=10, verbose_name='Study Dr’s opinion:')),
                ('dr_opinion_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other doctor opinion, please specify')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical recurrence symptom',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalResultItem',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(null=True)),
                ('utestid', models.CharField(max_length=25, null=True)),
                ('value', models.CharField(max_length=25, null=True)),
                ('quantifier', models.CharField(max_length=25, null=True)),
                ('value_datetime', models.DateTimeField(null=True)),
                ('reference', models.CharField(max_length=25, null=True)),
                ('pending_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('pending', models.BooleanField(default=True)),
                ('resulted_datetime', models.DateTimeField(null=True)),
                ('resulted', models.BooleanField(default=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('result', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_lab.Result')),
            ],
            options={
                'verbose_name': 'historical result item',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalStudyTerminationConclusion',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('date_patient_terminated', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date patient terminated study')),
                ('date_last_study_fu', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of last follow-up as part of the study')),
                ('discharged_after_initial_admission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=6, verbose_name='Was patient discharged after initial admission?')),
                ('date_initial_discharge', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of initial discharge')),
                ('readmission_after_initial_discharge', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=7, verbose_name='Was the patient readmitted following intial discharge?')),
                ('date_readmission', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of readmission')),
                ('date_discharged', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date discharged')),
                ('termination_reason', models.CharField(choices=[('10_weeks_completed_followUp', 'Patient completed 10 weeks of follow-up'), ('patient_lost_to_follow_up', 'Patient lost to follow-up'), ('died', 'Reported/known to have died'), ('withdrawal_of_subject_consent', 'Withdrawal of Subject Consent for participation'), ('care_transferred_to_another_institution', 'Care transferred to another institution'), ('late_exclusion_criteria_met', 'Late exclusion criteria met')], max_length=75, verbose_name='Reason for study termination')),
                ('death_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Death')),
                ('consent_withdrawal_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason for withdrawing consent')),
                ('willing_to_complete_10W_FU', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=12, verbose_name='Is the patient willing to completethe 10 week FU visit only?')),
                ('willing_to_complete_centre', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=17, verbose_name='Is the patient willing to complete the 10 weekFU visit only at their new care centre?')),
                ('date_willing_to_complete', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name=' Date the 10W FU due')),
                ('late_protocol_exclusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=4, verbose_name='late protocol exclusion met?')),
                ('rifampicin_started', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Rifampicin started since week 4?')),
                ('included_in_error', models.CharField(blank=True, max_length=75, null=True, verbose_name='Included in error')),
                ('first_line_regimen_patients', models.CharField(choices=[('N/A', 'Not Applicable'), ('TDF +3TC/FTC + either EFZ or NVP', 'TDF +3TC/FTC + either EFZ or NVP or or DTG'), ('AZT + 3-TC + either EFV or NVP or DTG', 'AZT + 3-TC + either EFV or NVP or DTG'), ('TDF + 3TC/FTC + either ATZ/r or Lopinavir/r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT + 3TC + either ATZ/r or Lopinavir/r', 'AZT + 3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other, specify')], max_length=75, verbose_name='First line ARV regimen started fornaive patients (or regimen switched for those already on ARVs)')),
                ('first_line_regimen_patients_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('second_line_regimen_patients', models.CharField(choices=[('N/A', 'Not Applicable'), ('TDF +3TC/FTC + either EFZ or NVP', 'TDF +3TC/FTC + either EFZ or NVP or or DTG'), ('AZT + 3-TC + either EFV or NVP or DTG', 'AZT + 3-TC + either EFV or NVP or DTG'), ('TDF + 3TC/FTC + either ATZ/r or Lopinavir/r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT + 3TC + either ATZ/r or Lopinavir/r', 'AZT + 3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other, specify')], max_length=75, verbose_name='Second line ARV regimen started for naive patients(or regimen switched for those already on ARVs)')),
                ('second_line_regimen_patients_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('date_arvs_started_or_switched', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('first_line_env', models.CharField(choices=[('N/A', 'Not Applicable'), ('EFV', 'EFV'), ('DTG', 'DTG'), ('NVP', 'NVP')], max_length=3, null=True, verbose_name='If first line, on EFV or NVP and or DTG?')),
                ('arvs_delay_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason ARVs not started')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical study termination conclusion',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the client')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the client had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the client questions about this study and they have demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='The client has signed the consent form?')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy to the clinic with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the client with a copy of their signed informed consent')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the subject agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP patient cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant LITERATE?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's Last and first name (illiterates only)")),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English')], help_text='The language used for the edc_consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('identity_type', edc_base.model_fields.custom_fields.IdentityTypeField(choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), ('PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text='Retype the identity number from the identity card (Encryption: RSA local)', max_length=71, null=True)),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('subject_screening', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_screening.SubjectScreening')),
            ],
            options={
                'verbose_name': 'historical subject consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('home_visit_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to make home visits for follow-up purposes during the study?')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('may_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to call her for follow-up purposes during the study?')),
                ('may_sms_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given his/her permission for study staff to SMS her for follow-up purposes during the study?')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Doesnt_work', 'Doesnt Work')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact her at work for follow up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Work contact number ')),
                ('may_contact_someone', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact anyone else for follow-up purposes during the study?')),
                ('contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical subject locator',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectOffstudy',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('offstudy_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Off-study Date')),
                ('reason', models.CharField(max_length=115, verbose_name='Please code the primary reason participant taken off-study')),
                ('reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical subject offstudy',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectRandomization',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('study_site', models.CharField(max_length=15, verbose_name='Site')),
                ('sid', models.IntegerField(db_index=True, verbose_name='SID')),
                ('rx', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Treatment Assignment')),
                ('subject_identifier', models.CharField(max_length=16, verbose_name='Subject Identifier')),
                ('randomization_datetime', models.DateTimeField(verbose_name='Randomization Datetime')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical subject randomization',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If \\missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason_unscheduled', models.CharField(blank=True, choices=[('routine_oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('ill_oncology', 'Ill oncology clinic visit'), ('patient_called', 'Patient called to come for visit'), ('OTHER', 'Other, specify:')], max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.Appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical subject visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalWeek2',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('physical_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Physical symptoms')),
                ('headache', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Headache')),
                ('visual_acuity_left_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Left Eye')),
                ('visual_acuity_right_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Right Eye')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', null=True, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(3)], verbose_name='Glasgow Coma Score')),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Confusion')),
                ('recent_seizure_less_72', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Recent seizure (<72 hrs)')),
                ('cn_palsy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='CN palsy')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Behaviour change')),
                ('focal_neurology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Focal neurology')),
                ('tb_pulmonary_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Pulmonary TB diagnosis since the last visit?')),
                ('tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of pulmonary TB diagnosis:')),
                ('extra_pulmonary_tb_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Extra pulmonary TB diagnosis since the last visit?')),
                ('extra_tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Extra Pulmonary TB diagnosis:')),
                ('kaposi_sarcoma_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name="Kaposi's sarcoma diagnosis since the last visit?")),
                ('kaposi_sarcoma_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="Date of Kaposi's sarcoma diagnosis:")),
                ('malaria_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Malaria diagnosis since the last visit?')),
                ('malaria_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of malaria diagnosis:')),
                ('bacteraemia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacteraemia diagnosis since the last visit?')),
                ('bacteraemia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacteraemia diagnosis:')),
                ('pneumonia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacterial pneumonia diagnosis since the last visit?')),
                ('pneumonia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacterial pneumonia diagnosis:')),
                ('diarrhoeal_wasting_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Diarrhoeal wasting diagnosis since the last visit?')),
                ('diarrhoeal_wasting_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of diarrhoeal wasting diagnosis:')),
                ('other_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Other significant diagnosis?')),
                ('other_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of other significant diagnosis:')),
                ('discharged', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Discharged?')),
                ('discharge_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('died', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Died?')),
                ('death_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('ampho_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Amphotericin B start date: ')),
                ('ampho_end_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Amphotericin B end date: ')),
                ('ampho_duration', models.IntegerField(blank=True, null=True, verbose_name='Amphotericin B treatment duration')),
                ('flucon_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Fluconazole start date:')),
                ('flucon_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Fluconazole end date:')),
                ('flucon_duration', models.IntegerField(blank=True, null=True, verbose_name='Fluconazole treatment duration:')),
                ('flucy_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Flucytosine start date:')),
                ('flucy_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Flucytosine end date:')),
                ('flucy_duration', models.IntegerField(blank=True, null=True, verbose_name='Flucytosine treatment duration:')),
                ('ambi_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Ambisome start date:')),
                ('ambi_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Ambisome end date:')),
                ('ambi_duration', models.IntegerField(blank=True, null=True, verbose_name='Ambisome treatment duration:')),
                ('other_drug_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('antibiotic_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other antibiotics, please specify:')),
                ('blood_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Blood transfusion received?')),
                ('units', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If yes, No. of units')),
                ('temperature', models.FloatField(blank=True, default=None, null=True, verbose_name='Temperature')),
                ('weight', models.IntegerField(help_text='Weight in Kilograms')),
                ('medicine_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('significant_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Other significant diagnoses since enrolment?')),
                ('significant_dx_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('flucon_missed_doses', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Were any Fluconazole drug doses missed?')),
                ('amphotericin_missed_doses', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Were any Amphotericin b drug doses missed?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical week2',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='LumbarPunctureCsf',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('reason_for_lp', models.CharField(choices=[('scheduled_per_protocol', 'Scheduled per protocol'), ('therapeutic_lp', 'Therapeutic LP'), ('suspected_IRIS_relapse', 'Suspected IRIS/Relapse')], max_length=50, verbose_name='Reason for LP')),
                ('opening_pressure', models.IntegerField(help_text='Units cm of H2O', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('closing_pressure', models.IntegerField(blank=True, help_text='Units cm of H2O', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('csf_amount_removed', models.IntegerField(help_text='Do not remove ≥ 40mL CSF. See management of raised ICP WPD', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(40)])),
                ('quantitative_culture', models.IntegerField(blank=True, help_text='Units CFU/ml', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999999)])),
                ('csf_culture', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='CSF culture: Other organism (non-crytococcus)')),
                ('other_csf_culture', models.CharField(blank=True, max_length=75, null=True, verbose_name='If yes, specify organism:')),
                ('csf_wbc_cell_count', models.IntegerField(help_text='acceptable units are mm3', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(999)], verbose_name='Total CSF WBC cell count:')),
                ('differential_lymphocyte_count', models.IntegerField(blank=True, help_text='acceptable units are mm3 or %', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='Differential lymphocyte cell count:')),
                ('differential_lymphocyte_unit', models.CharField(choices=[('mm3', 'mm3'), ('%', '%'), ('N/A', 'Not Applicable')], default='N/A', max_length=6)),
                ('differential_neutrophil_count', models.IntegerField(blank=True, help_text='acceptable units are mm3 or %', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(999)], verbose_name='Differential neutrophil cell count:')),
                ('differential_neutrophil_unit', models.CharField(choices=[('mm3', 'mm3'), ('%', '%'), ('N/A', 'Not Applicable')], default='N/A', max_length=3)),
                ('india_ink', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate'), ('not_done', 'Not Done')], max_length=15, null=True)),
                ('csf_glucose', models.DecimalField(blank=True, decimal_places=1, help_text='Units in mmol/L or mg/dL', max_digits=3, null=True)),
                ('csf_glucose_units', models.CharField(blank=True, choices=[('mg/dL', 'mg/dL'), ('mmol/L', 'mmol/L')], default='N/A', max_length=6, null=True)),
                ('csf_protein', models.DecimalField(blank=True, decimal_places=1, help_text='Units in g/dL', max_digits=3, null=True)),
                ('csf_cr_ag', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate'), ('not_done', 'Not Done')], max_length=15, null=True, verbose_name='CSF CrAg:')),
                ('csf_cr_ag_lfa', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='CSF CrAG done by CSF CrAG LFA:')),
            ],
            options={
                'verbose_name': 'Lumbar Puncture/Cerebrospinal Fluid',
                'verbose_name_plural': 'Lumbar Puncture/Cerebrospinal Fluid',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeningitisSymptom',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Microbiology',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('urine_culture_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='only for patients with >50 white cells in urine', max_length=5)),
                ('date_urine_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('urine_culture_results', models.CharField(choices=[('N/A', 'Not applicable'), ('no_growth', 'No growth'), ('POS', 'Positive')], default='N/A', max_length=10, verbose_name='Urine culture results, if completed')),
                ('urine_culture_organism', models.CharField(choices=[('N/A', 'Not Applicable'), ('e.coli', 'E.coli'), ('klebsiella_sp', 'Klebsiella sp.'), ('OTHER', 'Other, specify:')], default='N/A', max_length=25, verbose_name='If Positive, organism:')),
                ('urine_culture_organism_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('blood_culture_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('blood_culture_results', models.CharField(choices=[('N/A', 'Not applicable'), ('no_growth', 'No growth'), ('POS', 'Positive')], default='N/A', max_length=10, verbose_name='Blood culture results, if completed:')),
                ('date_blood_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('day_blood_taken', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(70)], verbose_name='If Positive, Study day positive culture sample taken:')),
                ('blood_culture_organism', models.CharField(choices=[('N/A', 'Not applicable'), ('cryptococcus_neoformans', 'Cryptococcus neoformans'), ('bacteria', 'Bacteria'), ('OTHER', 'Other, specify')], default='N/A', max_length=50, verbose_name='If growth positive, organism:')),
                ('blood_culture_organism_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, specify:')),
                ('bacteria_identified', models.CharField(choices=[('N/A', 'Not applicable'), ('e.coli', 'E.coli'), ('klebsiella_sp', 'Klebsiella sp'), ('streptococcus_pneumoniae', 'Streptococcus pneumoniae'), ('staphylococus_aureus', '(Sensitive) Staphylococus aureus'), ('mrsa', 'MRSA'), ('OTHER', 'Other, specify')], default='N/A', max_length=50, verbose_name='If bacteria, type:')),
                ('bacteria_identified_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, specify:')),
                ('sputum_afb_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was sputum afb done?', max_length=5, verbose_name='afb microscopy performed?')),
                ('date_sputum_afb_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('sputum_results_afb', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('N/A', 'Not applicable')], max_length=10, verbose_name='afb results')),
                ('sputum_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was sputum culture done?', max_length=5, verbose_name='Culture performed?')),
                ('date_sputum_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('sputum_results_culture', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('N/A', 'Not applicable')], max_length=10, verbose_name='Culture results:')),
                ('sputum_results_positive', models.CharField(blank=True, max_length=50, null=True, verbose_name='If culture is positive, please specify:')),
                ('sputum_genexpert_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Was sputum gene expert done?', max_length=5)),
                ('date_sputum_genexpert_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('sputum_result_genexpert', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('N/A', 'Not applicable')], max_length=15, verbose_name='Gene expert results:')),
                ('tissue_biopsy_taken', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('tissue_biopsy_results', models.CharField(choices=[('N/A', 'Not applicable'), ('no_growth', 'No growth'), ('POS', 'Positive')], default='N/A', max_length=10, verbose_name='If yes, results:')),
                ('date_biopsy_taken', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('day_biopsy_taken', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(70)], verbose_name='If Positive, Study day positive culture sample taken:')),
                ('tissue_biopsy_organism', models.CharField(choices=[('N/A', 'Not applicable'), ('cryptococcus_neoformans', 'Cryptococcus neoformans'), ('mycobacterium_tuberculosis', 'Mycobacterium Tuberculosis'), ('OTHER', 'If other, please specify')], default='N/A', max_length=50, verbose_name='If growth positive, organism:')),
                ('tissue_biopsy_organism_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('histopathology_report', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Microbiology',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MissedVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('missed_study_visit_date', models.DateField(validators=[edc_base.model_validators.date.date_not_future])),
                ('visit_missed', models.DecimalField(decimal_places=1, help_text='Insert visit code', max_digits=3)),
                ('missed_visit_reason_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other reason, please specify:')),
                ('notes_or_action_taken', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='MissedVisitReason',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Neurological',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherDrug',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientHistory',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('headache_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If headache, how many days did it last?')),
                ('visual_loss_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If visual loss, how many days did it last?')),
                ('med_history', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Previous medical history of Tubercolosis?')),
                ('tb_site', models.CharField(choices=[('N/A', 'Not Applicable'), ('pulmonary', 'Pulmonary'), ('extra_pulmonary', 'Extra pulmonary')], default='N/A', max_length=15, verbose_name='If Yes, site of TB?')),
                ('tb_treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Are you currently taking TB treatment?')),
                ('taking_rifampicin', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If yes, are you currently also taking Rifampicin?')),
                ('rifampicin_started_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, when did you first start taking Rifampicin?')),
                ('previous_infection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Previous opportunistic infection other than TB?')),
                ('previous_infection_specify', models.CharField(blank=True, max_length=50, null=True, verbose_name='If yes, specify')),
                ('infection_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, what was the date of infection?')),
                ('new_hiv_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is this a new HIV diagnosis?')),
                ('taking_arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='If Yes,Already taking ARVs?')),
                ('arv_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, date ARVs were started.')),
                ('arv_regimen', models.CharField(choices=[('N/A', 'Not Applicable'), ('TDF +3TC/FTC + either EFZ or NVP', 'TDF +3TC/FTC + either EFZ or NVP or or DTG'), ('AZT + 3-TC + either EFV or NVP or DTG', 'AZT + 3-TC + either EFV or NVP or DTG'), ('TDF + 3TC/FTC + either ATZ/r or Lopinavir/r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT + 3TC + either ATZ/r or Lopinavir/r', 'AZT + 3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other, specify')], default='N/A', max_length=50, verbose_name='What ARV regimen are you currently prescribed?')),
                ('arv_regimen_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('first_line_choice', models.CharField(choices=[('N/A', 'Not Applicable'), ('EFV', 'EFV'), ('DTG', 'DTG'), ('NVP', 'NVP')], default='N/A', max_length=5, null=True, verbose_name='If first line:')),
                ('patient_adherence', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Is the patient reportedly adherent?')),
                ('last_dose', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If no, how many months since the last dose was taken?')),
                ('last_viral_load', models.DecimalField(blank=True, decimal_places=3, help_text='copies/mL', max_digits=8, null=True, verbose_name='Last Viral Load, if known?')),
                ('temp', models.DecimalField(decimal_places=1, help_text='°C', max_digits=3, verbose_name='Temperature:')),
                ('heart_rate', models.IntegerField(help_text='bpm', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Heart Rate:')),
                ('blood_pressure', models.CharField(help_text='in mmHg. format SYS/DIA, e.g. 120/80', max_length=6, validators=[django.core.validators.RegexValidator('^\\d{1,3}\\/\\d{1,3}$', message='Enter a valid BP in SYS/DIA format')], verbose_name='Blood Pressure:')),
                ('respiratory_rate', models.IntegerField(help_text='breaths/min', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Respiratory Rate:')),
                ('weight', models.DecimalField(decimal_places=1, help_text='Kg', max_digits=4, verbose_name='Weight:')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)], verbose_name='Glasgow Coma Score:')),
                ('neurological_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('focal_neurologic_deficit', models.TextField(blank=True, null=True, verbose_name='If focal neurologic deficit chosen, please specify details:')),
                ('visual_acuity_day', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Study day visual acuity recorded?')),
                ('left_acuity', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True, verbose_name='Visual acuity Left eye:')),
                ('right_acuity', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True, verbose_name='Visual Acuity Right eye')),
                ('ecog_score', models.CharField(choices=[('0', 'Fully active, able to carry on all pre-disease performance without restriction'), ('1', 'Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work'), ('2', 'Ambulatory and capable of all selfcare but unable to carry out any work activities;up and about more than 50% of waking hours '), ('3', 'Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours'), ('4', 'Completely disabled; cannot carry on any selfcare; totally confined to bed or chair'), ('5', 'Dead')], max_length=15, verbose_name='ECOG Disability score')),
                ('ecog_score_value', models.CharField(choices=[('0', 'Fully active, able to carry on all pre-disease performance without restriction'), ('1', 'Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature, e.g., light house work, office work'), ('2', 'Ambulatory and capable of all selfcare but unable to carry out any work activities;up and about more than 50% of waking hours '), ('3', 'Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours'), ('4', 'Completely disabled; cannot carry on any selfcare; totally confined to bed or chair'), ('5', 'Dead')], max_length=15, verbose_name='ECOG Score')),
                ('lung_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Abnormal lung exam:')),
                ('cryptococcal_lesions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Cryptococcal related skin lesions:')),
                ('other_meds', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Other medication')),
                ('other_meds_tmp_smx', edc_base.model_fields.custom_fields.OtherCharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], editable=True, verbose_name='...if "Other", specify')),
                ('specify_medications_other', models.TextField(blank=True, max_length=150, null=True, verbose_name='...if "Other", specify')),
                ('neurological', models.ManyToManyField(blank=True, to='ambition_subject.Neurological')),
                ('specify_medications', models.ManyToManyField(blank=True, to='ambition_subject.Medication')),
            ],
            options={
                'verbose_name_plural': 'Patients History',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrnModel',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('adverse_event', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Adverse event?')),
                ('microbiology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Microbiology?')),
                ('radiology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Radiology?')),
                ('protocol_deviation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Protocol Deviation?')),
                ('lumbar_puncture', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Lumbar puncture?')),
                ('death_report', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Death Report?')),
            ],
            options={
                'verbose_name': 'PRN Forms',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtocolDeviationViolation',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('participant_safety_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on safety of the participant')),
                ('participant_safety_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('study_outcomes_impact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Could this occurrence have an impact on Study outcomes')),
                ('study_outcomes_impact_details', models.TextField(blank=True, null=True, verbose_name='If yes, details:')),
                ('date_violation_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date violation occured:')),
                ('protocol_violation_type', models.CharField(blank=True, choices=[('failure_to_obtain_informed_consent', 'Failure to obtain informed consent'), ('enrollment_of_ineligible_patient', 'Enrollment of ineligible patient'), ('screening_procedure not done', 'Screening procedure required by protocol not done'), ('screening_or_on-study_procedure', 'Screening or on-study procedure/lab work required not done'), ('incorrect_research_treatment', 'Incorrect research treatment given to patient'), ('procedure_not_completed', 'On-study procedure required by protocol not completed'), ('visit_non-compliance', 'Visit non-compliance'), ('medication_stopped_early', 'Medication stopped early'), ('medication_noncompliance', 'Medication_noncompliance'), ('national_regulations_not_met', 'Standard WPD, ICH-GCP, local/national regulations not met'), ('OTHER', 'Other')], max_length=70, null=True, verbose_name='Type of Protocol Violation/Deviation')),
                ('other_protocol_violation_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify')),
                ('violation_description', models.TextField(blank=True, null=True, verbose_name='Describe the violation fully. How the violation happened, what occurred?')),
                ('violation_reason', models.TextField(blank=True, null=True, verbose_name='Explain the reason why the violation occurred')),
                ('corrective_action_datetime', models.DateTimeField(validators=[edc_base.model_validators.date.date_not_future])),
                ('corrective_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Corrective action taken')),
                ('preventative_action_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('preventative_action', models.CharField(blank=True, max_length=125, null=True, verbose_name='Preventative action taken')),
                ('action_required', models.CharField(blank=True, choices=[('participant_to_remain', 'Participant to remain on trial'), ('participant_to_be_withdrawn', 'participant to be withdrawn from trial'), ('patient_remains_on_study', 'Patient remains on study but data analysis will be modified')], max_length=25, null=True, verbose_name='action required')),
            ],
        ),
        migrations.CreateModel(
            name='Radiology',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('is_cxr_done', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is CXR done')),
                ('cxr_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='If yes, when was CXR done')),
                ('cxr_type', models.CharField(choices=[('N/A', 'Not Applicable'), ('NORMAL', 'Normal'), ('hilar_adenopathy', 'Hilar adenopathy'), ('miliary_appearance', 'Miliary appearance'), ('pleural_effusion', 'Pleural effusion'), ('infiltrate_location', 'Infiltrate-Location')], max_length=75, null=True, verbose_name='If yes, specify CXR type:')),
                ('infiltrate_location', models.CharField(choices=[('N/A', 'Not Applicable'), ('lul', 'LUL'), ('lll', 'LLL'), ('rul', 'RUL'), ('rll', 'RLL'), ('rml', 'RML'), ('diffuse', 'Diffuse')], max_length=10, null=True, verbose_name='If CXR type is Infiltrate, please specify location:')),
                ('cxr_description', models.TextField(blank=True, null=True, verbose_name='Description/Comments:')),
                ('is_ct_performed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='CT/MRI brain scan performed?:')),
                ('date_ct_performed', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, validators=[edc_base.model_validators.date.datetime_not_future])),
                ('is_scanned_with_contrast', models.CharField(choices=[('Yes', 'Yes, (Specify below)'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='CT/MRI brain scan performed with contrast?:')),
                ('brain_imaging_reason', models.CharField(choices=[('N/A', 'Not Applicable'), ('reduction_in_gcs', 'Reduction in GCS'), ('new_neurology', 'New neurology'), ('OTHER', 'Other, specify')], max_length=25, null=True, verbose_name='Reason for brain imaging:')),
                ('brain_imaging_reason_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('are_results_abnormal', models.CharField(choices=[('Yes', 'Yes, (Specify below)'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5)),
                ('abnormal_results_reason', models.CharField(choices=[('N/A', 'Not Applicable'), ('cerebral_oedema', 'Cerebral oedema'), ('hydrocephalus', 'Hydrocephalus'), ('cryptococcomus', 'Cryptococcomus'), ('dilated_virchow_robin_spaces', 'Dilated Virchow robin spaces'), ('enhancing_mass_lesions', 'Enhancing mass lesions DD Toxoplasmosis, TB, lymphoma'), ('infarcts', 'Infarcts'), ('OTHER', 'Other, please specify:')], max_length=50, null=True, verbose_name='If results are abnormal, what is the reason?:')),
                ('abnormal_results_reason_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify reason:')),
                ('if_infarcts_location', models.CharField(blank=True, max_length=50, null=True, verbose_name='If results are abnormal because of Infarcts, what is the location?')),
            ],
            options={
                'verbose_name_plural': 'Radiology',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RandomizationItem',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
        ),
        migrations.CreateModel(
            name='RecurrenceSymptom',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('meningitis_symptom_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other symptom, please specify')),
                ('patient_readmitted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If Yes, complete AE CRF.', max_length=5, verbose_name='Has the patient been readmitted due to these recurrent  symptoms?')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)], verbose_name='Score:')),
                ('recent_seizure', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Recent seizure (<72 hrs):')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('focal_neurologic_deficit', models.CharField(blank=True, max_length=15, null=True, verbose_name='If focal neurologic deficit chosen, please specify')),
                ('other_cn_palsy_chosen', models.CharField(blank=True, max_length=15, null=True, verbose_name='If other CN Palsy chosen specify')),
                ('lp_completed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If yes, complete LP form', max_length=5)),
                ('amb_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('amb_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If yes, Specify length of course')),
                ('tb_treatment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='TB Treatment:')),
                ('steroids_administered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5)),
                ('steroids_duration', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If yes, Specify length of course:')),
                ('steroids_choices', models.CharField(choices=[('oral_prednisolone', 'Oral prednisolone'), ('iv_dexamethasone', 'IV Dexamethasone used'), ('OTHER', 'Other, specify:')], max_length=25, verbose_name='If Yes')),
                ('steroids_choices_other', models.CharField(blank=True, max_length=50, verbose_name='If other steroids, please specify')),
                ('CD4_count', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='CD4 count (if available)')),
                ('antibiotic_treatment_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other antibiotic treatment, please specify')),
                ('on_arvs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='On ARVS:')),
                ('arv_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Study date ARVs started.')),
                ('arvs_stopped', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=5, verbose_name='ARVs stopped this clinical episode?')),
                ('narrative_summary', models.TextField(help_text='Please ensure the following forms have been completed: LP, Bloods, Microbiology, Radiology', verbose_name='Narrative Summary of recurrence of symptoms:')),
                ('dr_opinion', models.CharField(choices=[('cm_release', 'CM Relapse'), ('cm_iris', 'CM IRIS'), ('OTHER', 'Other, specify')], max_length=10, verbose_name='Study Dr’s opinion:')),
                ('dr_opinion_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other doctor opinion, please specify')),
                ('antibiotic_treatment', models.ManyToManyField(blank=True, to='ambition_subject.AntibioticTreatment', verbose_name='Antibiotics treatment')),
                ('meningitis_symptom', models.ManyToManyField(blank=True, to='ambition_subject.MeningitisSymptom', verbose_name='What are your current symptoms?')),
                ('neurological', models.ManyToManyField(blank=True, to='ambition_subject.Neurological', verbose_name='neurologic:')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResultItem',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(null=True)),
                ('utestid', models.CharField(max_length=25, null=True)),
                ('value', models.CharField(max_length=25, null=True)),
                ('quantifier', models.CharField(max_length=25, null=True)),
                ('value_datetime', models.DateTimeField(null=True)),
                ('reference', models.CharField(max_length=25, null=True)),
                ('pending_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('pending', models.BooleanField(default=True)),
                ('resulted_datetime', models.DateTimeField(null=True)),
                ('resulted', models.BooleanField(default=False)),
                ('result', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='edc_lab.Result')),
            ],
        ),
        migrations.CreateModel(
            name='SignificantDiagnoses',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('possible_diagnoses', models.CharField(choices=[('pulmonary_tb', 'Pulmonary TB'), ('extra_pulmonary_tb', 'Extra Pulmonary TB'), ('kaposi_sarcoma', 'Kaposi Sarcoma'), ('malaria', 'Malaria'), ('bacteraemia', 'Bacteraemia'), ('pneumonia', 'Pneumonia'), ('diarrhoeal_wasting', 'Diarrhoeal Wasting'), ('OTHER', 'Other')], max_length=25, verbose_name='Significant diagnoses:')),
                ('dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of diagnosis:')),
                ('dx_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
            ],
        ),
        migrations.CreateModel(
            name='SignificantNewDiagnosis',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudyTerminationConclusion',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('date_patient_terminated', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date patient terminated study')),
                ('date_last_study_fu', models.DateField(validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of last follow-up as part of the study')),
                ('discharged_after_initial_admission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=6, verbose_name='Was patient discharged after initial admission?')),
                ('date_initial_discharge', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of initial discharge')),
                ('readmission_after_initial_discharge', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=7, verbose_name='Was the patient readmitted following intial discharge?')),
                ('date_readmission', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of readmission')),
                ('date_discharged', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date discharged')),
                ('termination_reason', models.CharField(choices=[('10_weeks_completed_followUp', 'Patient completed 10 weeks of follow-up'), ('patient_lost_to_follow_up', 'Patient lost to follow-up'), ('died', 'Reported/known to have died'), ('withdrawal_of_subject_consent', 'Withdrawal of Subject Consent for participation'), ('care_transferred_to_another_institution', 'Care transferred to another institution'), ('late_exclusion_criteria_met', 'Late exclusion criteria met')], max_length=75, verbose_name='Reason for study termination')),
                ('death_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Death')),
                ('consent_withdrawal_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason for withdrawing consent')),
                ('willing_to_complete_10W_FU', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=12, verbose_name='Is the patient willing to completethe 10 week FU visit only?')),
                ('willing_to_complete_centre', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=17, verbose_name='Is the patient willing to complete the 10 weekFU visit only at their new care centre?')),
                ('date_willing_to_complete', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name=' Date the 10W FU due')),
                ('late_protocol_exclusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=4, verbose_name='late protocol exclusion met?')),
                ('rifampicin_started', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Rifampicin started since week 4?')),
                ('included_in_error', models.CharField(blank=True, max_length=75, null=True, verbose_name='Included in error')),
                ('first_line_regimen_patients', models.CharField(choices=[('N/A', 'Not Applicable'), ('TDF +3TC/FTC + either EFZ or NVP', 'TDF +3TC/FTC + either EFZ or NVP or or DTG'), ('AZT + 3-TC + either EFV or NVP or DTG', 'AZT + 3-TC + either EFV or NVP or DTG'), ('TDF + 3TC/FTC + either ATZ/r or Lopinavir/r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT + 3TC + either ATZ/r or Lopinavir/r', 'AZT + 3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other, specify')], max_length=75, verbose_name='First line ARV regimen started fornaive patients (or regimen switched for those already on ARVs)')),
                ('first_line_regimen_patients_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If other, please specify:')),
                ('second_line_regimen_patients', models.CharField(choices=[('N/A', 'Not Applicable'), ('TDF +3TC/FTC + either EFZ or NVP', 'TDF +3TC/FTC + either EFZ or NVP or or DTG'), ('AZT + 3-TC + either EFV or NVP or DTG', 'AZT + 3-TC + either EFV or NVP or DTG'), ('TDF + 3TC/FTC + either ATZ/r or Lopinavir/r', 'TDF + 3TC/FTC + either ATZ/r or Lopinavir/r'), ('AZT + 3TC + either ATZ/r or Lopinavir/r', 'AZT + 3TC + either ATZ/r or Lopinavir/r'), ('OTHER', 'Other, specify')], max_length=75, verbose_name='Second line ARV regimen started for naive patients(or regimen switched for those already on ARVs)')),
                ('second_line_regimen_patients_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('date_arvs_started_or_switched', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('first_line_env', models.CharField(choices=[('N/A', 'Not Applicable'), ('EFV', 'EFV'), ('DTG', 'DTG'), ('NVP', 'NVP')], max_length=3, null=True, verbose_name='If first line, on EFV or NVP and or DTG?')),
                ('arvs_delay_reason', models.CharField(blank=True, max_length=75, null=True, verbose_name='Reason ARVs not started')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the client')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the client had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the client questions about this study and they have demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='The client has signed the consent form?')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy to the clinic with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the client with a copy of their signed informed consent')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the subject agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP patient cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant LITERATE?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's Last and first name (illiterates only)")),
                ('language', models.CharField(choices=[('tn', 'Setswana'), ('en', 'English')], help_text='The language used for the edc_consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('identity_type', edc_base.model_fields.custom_fields.IdentityTypeField(choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), ('PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(blank=True, help_text='Retype the identity number from the identity card (Encryption: RSA local)', max_length=71, null=True)),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('subject_screening', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ambition_screening.SubjectScreening')),
            ],
            options={
                'ordering': ('-created',),
                'get_latest_by': 'consent_datetime',
                'abstract': False,
            },
            bases=(django_crypto_fields.mixins.CryptoMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('home_visit_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to make home visits for follow-up purposes during the study?')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('may_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to call her for follow-up purposes during the study?')),
                ('may_sms_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given his/her permission for study staff to SMS her for follow-up purposes during the study?')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Doesnt_work', 'Doesnt Work')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact her at work for follow up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Work contact number ')),
                ('may_contact_someone', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact anyone else for follow-up purposes during the study?')),
                ('contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectOffstudy',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('offstudy_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Off-study Date')),
                ('reason', models.CharField(max_length=115, verbose_name='Please code the primary reason participant taken off-study')),
                ('reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name_plural': 'Subject Off Study',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectRandomization',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('study_site', models.CharField(max_length=15, verbose_name='Site')),
                ('sid', models.IntegerField(unique=True, verbose_name='SID')),
                ('rx', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Treatment Assignment')),
                ('subject_identifier', models.CharField(max_length=16, verbose_name='Subject Identifier')),
                ('randomization_datetime', models.DateTimeField(verbose_name='Randomization Datetime')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
            ],
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('panel_name', models.CharField(max_length=25)),
                ('requisition_identifier', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(editable=False, max_length=50, null=True, unique=True)),
                ('primary_aliquot_identifier', models.CharField(editable=False, max_length=18, null=True, unique=True)),
                ('requisition_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn', models.CharField(choices=[('N/A', 'Not applicable'), ('collection_failed', 'Tried, but unable obtaining sample from patient'), ('absent', 'Patient did not attend visit'), ('refused', 'Patient refused'), ('no_supplies', 'No supplies')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('study_site', models.CharField(blank=True, max_length=10, null=True)),
                ('study_site_name', models.CharField(blank=True, max_length=25, null=True)),
                ('protocol_number', models.CharField(editable=False, max_length=10, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('item_count', models.IntegerField(blank=True, help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', null=True, verbose_name='Number of items')),
                ('estimated_volume', models.DecimalField(blank=True, decimal_places=2, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, null=True, verbose_name='Estimated volume in mL')),
                ('comments', models.TextField(blank=True, max_length=25, null=True)),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If \\missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason_unscheduled', models.CharField(blank=True, choices=[('routine_oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('ill_oncology', 'Ill oncology clinic visit'), ('patient_called', 'Patient called to come for visit'), ('OTHER', 'Other, specify:')], max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.Appointment')),
            ],
            options={
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'report_datetime'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
            ],
            options={
                'ordering': ['display_index', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Week16',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('patient_alive', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Is the patient alive?')),
                ('activities_help', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example eating, drinking, washing, brushing teeth, going to the toilet.', max_length=5, verbose_name='Does the patient require help from anybody for everyday activities?')),
                ('illness_problems', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, verbose_name='Has the illness left the patient with any other problems?')),
                ('ranking_score', models.CharField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], max_length=5, verbose_name='Modified Ranking score:')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Week2',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('physical_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Physical symptoms')),
                ('headache', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Headache')),
                ('visual_acuity_left_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Left Eye')),
                ('visual_acuity_right_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Right Eye')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', null=True, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(3)], verbose_name='Glasgow Coma Score')),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Confusion')),
                ('recent_seizure_less_72', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Recent seizure (<72 hrs)')),
                ('cn_palsy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='CN palsy')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Behaviour change')),
                ('focal_neurology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Focal neurology')),
                ('tb_pulmonary_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Pulmonary TB diagnosis since the last visit?')),
                ('tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of pulmonary TB diagnosis:')),
                ('extra_pulmonary_tb_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Extra pulmonary TB diagnosis since the last visit?')),
                ('extra_tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Extra Pulmonary TB diagnosis:')),
                ('kaposi_sarcoma_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name="Kaposi's sarcoma diagnosis since the last visit?")),
                ('kaposi_sarcoma_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="Date of Kaposi's sarcoma diagnosis:")),
                ('malaria_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Malaria diagnosis since the last visit?')),
                ('malaria_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of malaria diagnosis:')),
                ('bacteraemia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacteraemia diagnosis since the last visit?')),
                ('bacteraemia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacteraemia diagnosis:')),
                ('pneumonia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacterial pneumonia diagnosis since the last visit?')),
                ('pneumonia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacterial pneumonia diagnosis:')),
                ('diarrhoeal_wasting_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Diarrhoeal wasting diagnosis since the last visit?')),
                ('diarrhoeal_wasting_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of diarrhoeal wasting diagnosis:')),
                ('other_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Other significant diagnosis?')),
                ('other_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of other significant diagnosis:')),
                ('discharged', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Discharged?')),
                ('discharge_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('died', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Died?')),
                ('death_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('ampho_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Amphotericin B start date: ')),
                ('ampho_end_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Amphotericin B end date: ')),
                ('ampho_duration', models.IntegerField(blank=True, null=True, verbose_name='Amphotericin B treatment duration')),
                ('flucon_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Fluconazole start date:')),
                ('flucon_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Fluconazole end date:')),
                ('flucon_duration', models.IntegerField(blank=True, null=True, verbose_name='Fluconazole treatment duration:')),
                ('flucy_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Flucytosine start date:')),
                ('flucy_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Flucytosine end date:')),
                ('flucy_duration', models.IntegerField(blank=True, null=True, verbose_name='Flucytosine treatment duration:')),
                ('ambi_start_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Ambisome start date:')),
                ('ambi_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Ambisome end date:')),
                ('ambi_duration', models.IntegerField(blank=True, null=True, verbose_name='Ambisome treatment duration:')),
                ('other_drug_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('antibiotic_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other antibiotics, please specify:')),
                ('blood_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Blood transfusion received?')),
                ('units', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='If yes, No. of units')),
                ('temperature', models.FloatField(blank=True, default=None, null=True, verbose_name='Temperature')),
                ('weight', models.IntegerField(help_text='Weight in Kilograms')),
                ('medicine_other', models.CharField(blank=True, max_length=50, null=True, verbose_name='If other, please specify:')),
                ('significant_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Other significant diagnoses since enrolment?')),
                ('significant_dx_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future])),
                ('flucon_missed_doses', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Were any Fluconazole drug doses missed?')),
                ('amphotericin_missed_doses', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Were any Amphotericin b drug doses missed?')),
                ('antibiotic', models.ManyToManyField(to='ambition_subject.Antibiotic', verbose_name='Were any of the following antibiotics given?')),
                ('medicines', models.ManyToManyField(to='ambition_subject.Day14Medication', verbose_name='Medicines receieved on Day 14:')),
                ('other_drug', models.ManyToManyField(to='ambition_subject.OtherDrug', verbose_name='Other drugs/interventions given during first 14 days')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Week4',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model_validators.date.datetime_not_future, edc_protocol.validators.datetime_not_before_study_start], verbose_name='Report Date')),
                ('physical_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Physical symptoms')),
                ('headache', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Headache')),
                ('visual_acuity_left_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Left Eye')),
                ('visual_acuity_right_eye', models.DecimalField(decimal_places=3, max_digits=4, null=True, verbose_name='Viscuity Right Eye')),
                ('glasgow_coma_score', models.IntegerField(help_text='/15', null=True, validators=[django.core.validators.MaxValueValidator(15), django.core.validators.MinValueValidator(3)], verbose_name='Glasgow Coma Score')),
                ('confusion', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Confusion')),
                ('recent_seizure_less_72', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Recent seizure (<72 hrs)')),
                ('cn_palsy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='CN palsy')),
                ('behaviour_change', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Behaviour change')),
                ('focal_neurology', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Focal neurology')),
                ('tb_pulmonary_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Pulmonary TB diagnosis since the last visit?')),
                ('tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of pulmonary TB diagnosis:')),
                ('extra_pulmonary_tb_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Extra pulmonary TB diagnosis since the last visit?')),
                ('extra_tb_pulmonary_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of Extra Pulmonary TB diagnosis:')),
                ('kaposi_sarcoma_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name="Kaposi's sarcoma diagnosis since the last visit?")),
                ('kaposi_sarcoma_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name="Date of Kaposi's sarcoma diagnosis:")),
                ('malaria_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Malaria diagnosis since the last visit?')),
                ('malaria_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of malaria diagnosis:')),
                ('bacteraemia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacteraemia diagnosis since the last visit?')),
                ('bacteraemia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacteraemia diagnosis:')),
                ('pneumonia_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Bacterial pneumonia diagnosis since the last visit?')),
                ('pneumonia_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of bacterial pneumonia diagnosis:')),
                ('diarrhoeal_wasting_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Diarrhoeal wasting diagnosis since the last visit?')),
                ('diarrhoeal_wasting_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of diarrhoeal wasting diagnosis:')),
                ('other_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True, verbose_name='Other significant diagnosis?')),
                ('other_dx_date', models.DateField(blank=True, null=True, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date of other significant diagnosis:')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='subjectrequisition',
            name='subject_visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='studyterminationconclusion',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='significantdiagnoses',
            name='week2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ambition_subject.Week2'),
        ),
        migrations.AddField(
            model_name='recurrencesymptom',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='randomizationitem',
            unique_together=set([('display_index', 'name', 'field_name')]),
        ),
        migrations.AddField(
            model_name='radiology',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='protocoldeviationviolation',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='prnmodel',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='patienthistory',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='patienthistory',
            name='symptom',
            field=models.ManyToManyField(blank=True, related_name='symptoms', to='ambition_subject.Symptom', verbose_name='What are your current symptoms?'),
        ),
        migrations.AddField(
            model_name='missedvisit',
            name='missed_visit_reason',
            field=models.ManyToManyField(to='ambition_subject.MissedVisitReason', verbose_name='Reason(s) why participant missed the study visit;'),
        ),
        migrations.AddField(
            model_name='microbiology',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='lumbarpuncturecsf',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalweek2',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalstudyterminationconclusion',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalrecurrencesymptom',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalradiology',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalprotocoldeviationviolation',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalpatienthistory',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalmicrobiology',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicallumbarpuncturecsf',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalfollowup',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalfluconazolemisseddoses',
            name='week2',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.Week2'),
        ),
        migrations.AddField(
            model_name='historicaldeathreport',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalbloodresult',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalamphotericinmisseddoses',
            name='week2',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.Week2'),
        ),
        migrations.AddField(
            model_name='historicaladverseevent',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='followup',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='fluconazolemisseddoses',
            name='week2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ambition_subject.Week2'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name')]),
        ),
        migrations.AlterUniqueTogether(
            name='disenrollment',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name')]),
        ),
        migrations.AddField(
            model_name='deathreport',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='clinicnote',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='bloodresult',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'timepoint')]),
        ),
        migrations.AddField(
            model_name='amphotericinmisseddoses',
            name='week2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ambition_subject.Week2'),
        ),
        migrations.AddField(
            model_name='adverseeventtmg',
            name='ae_classification',
            field=models.ManyToManyField(blank=True, to='ambition_subject.AEClassification', verbose_name='Classification of AE (Tick all that apply):'),
        ),
        migrations.AddField(
            model_name='adverseeventfollowup',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='adverseevent',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='ambition_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectvisit',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime')]),
        ),
        migrations.AlterUniqueTogether(
            name='subjectconsent',
            unique_together=set([('first_name', 'dob', 'initials', 'version'), ('subject_identifier', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='significantdiagnoses',
            unique_together=set([('possible_diagnoses', 'dx_date')]),
        ),
        migrations.AlterUniqueTogether(
            name='fluconazolemisseddoses',
            unique_together=set([('day_missed', 'flucon_missed_reason')]),
        ),
        migrations.AlterUniqueTogether(
            name='amphotericinmisseddoses',
            unique_together=set([('day_missed', 'ampho_missed_reason')]),
        ),
    ]
