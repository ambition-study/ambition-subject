# Generated by Django 2.0 on 2018-01-03 21:07

import django.core.validators
from django.db import migrations, models
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.lastname_field
import edc_consent.validators


class Migration(migrations.Migration):

    dependencies = [
        ('ambition_subject', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='historicalsubjectconsent',
            name='is_signed',
        ),
        migrations.RemoveField(
            model_name='subjectconsent',
            name='is_signed',
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='assessment_score',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='citizen',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? '),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='consent_copy',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='consent_reviewed',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='consent_signature',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='The participant has signed the consent form?'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='first_name',
            field=django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='guardian_name',
            field=django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followed by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name"),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='initials',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')]),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='is_literate',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant LITERATE?'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='last_name',
            field=django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='legal_marriage',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana Citizen?'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='may_store_genetic_samples',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='may_store_samples',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='study_questions',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='witness_name',
            field=django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name (illiterates only)"),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='assessment_score',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='citizen',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? '),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='consent_copy',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='consent_reviewed',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='consent_signature',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='The participant has signed the consent form?'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='first_name',
            field=django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='guardian_name',
            field=django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followed by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name"),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='initials',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')]),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='is_literate',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant LITERATE?'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='last_name',
            field=django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='legal_marriage',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana Citizen?'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='may_store_genetic_samples',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='may_store_samples',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='study_questions',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study'),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='witness_name',
            field=django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name (illiterates only)"),
        ),
    ]
